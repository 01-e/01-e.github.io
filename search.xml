<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>元旦开笔，诸事大吉。</title>
      <link href="/2022/02/01/%E5%85%83%E6%97%A6%E5%BC%80%E7%AC%94/"/>
      <url>/2022/02/01/%E5%85%83%E6%97%A6%E5%BC%80%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.cngdwx.com/zatan/lidaihuangdigushi/217045.html">元旦开笔</a>起源于雍正时期，乾隆继位后60年，从未间断过这个仪式。</p><p>疫情从19年12月到现在已经有三年多，时间是最公平的，想想也是快，现在大三，还有好多事情没去做，今天大年初一，写下自己的新年祝愿：希望之后的一年诸事大吉！</p>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基本操作</title>
      <link href="/2022/01/20/%E5%85%B3%E4%BA%8Egit/"/>
      <url>/2022/01/20/%E5%85%B3%E4%BA%8Egit/</url>
      
        <content type="html"><![CDATA[<blockquote><p>观看<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a>所写的笔记。</p></blockquote><ul><li><p>git的常用操作：</p><ol><li><p><code>git add &lt;filename&gt;</code></p><p>将某个文件添加到仓库的缓存区</p></li><li><p><code>git commit -m &quot;描述&quot;</code></p><p>将文件提交到仓库，并记录干了什么</p></li><li><p><code>git status</code></p><p>查看仓库状态</p></li></ol></li><li><p>git进阶操作</p><ol><li><p><code>git log</code></p><p>查看提交日志</p></li><li><p><code>git reset --hard HEAD^</code></p><p>退回到<strong>上一次</strong>提交的版本：这里是指，虽然本次文件被你修改了并且提交仓库，但是还是可以退回到没有提交仓库的状态，而且文件还是没被修改过的状态。</p><p><code>git reset --hard HEAD^^</code></p><p>退回到<strong>上上一次</strong>提交的版本</p><p><code>git reset --hard HEAD commi观看本号</code></p><p>退回到特定版本的状态</p></li><li><p><code>git reflog</code></p><p>最无敌的查看日志，可以查看你的所有日志，方便你退回到某一个版本却找不到版本号</p></li><li><p><code>git checkout -- &lt;filename&gt;</code></p><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p></li><li><p><code>git restore --staged &lt;filename&gt;</code></p><p>将文件移除缓存区</p></li></ol></li><li><p>git 删除</p><ol><li><p>如果某个文件已经commit到了仓库，但直接手动或命令把文件删除了，这时候用<code>git status</code>查看状态会显示有一条文件被删除的记录，可以使用<code>rm 文件名</code>的方式将删除记录也给删除了。</p></li><li><p>如果某个文件已经commit到了仓库，手动或命令把文件删除了，可以用<code>git checkout -- 文件名</code>撤销文件删除。</p></li><li><p>只要是将代码commit到仓库的，可以撤销删除。</p></li><li><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p><ol><li><code>git reset HEAD 文件名</code></li><li><code>git checkout 文件名</code></li></ol><p>可以回到文件commit之后，还没被删除时候的状态。</p></li></ol></li><li><p>git远程</p><ol><li><p><code>git clone</code></p><p>可以用来clone远程仓库文件到本地，例如：<code>git clone git@github.com:01-e/demo.git</code></p></li><li><p><code>git remote add origin git@github.com:&lt;username&gt;/&lt;repositoryname&gt;</code></p><p>与远程仓库连接</p></li><li><p><code>git push -u origin &lt;本地仓库名&gt;</code></p><p>第一次将本地仓库提交到远程</p><p><code>git push origin &lt;本地仓库名&gt;</code></p><p>之后将本地仓库提交到远程</p></li><li><p><code>git remote -v</code></p><p>查看远程仓库信息</p></li><li><p><code>git remote rm &lt;远程仓库名&gt;</code></p><p>删除远程仓库（解除了本地和远程的绑定关系，并不是物理上删除了远程库。）</p></li></ol></li><li><p>git 分支操作</p><ol><li><p><code>git checkout -b &lt;分支名&gt; | git switch -c &lt;分支名&gt;</code></p><p>创建并切换分支</p></li><li><p><code>git branch &lt;分支名&gt;</code></p><p>创建分支</p></li><li><p><code>git checkout &lt;分支名&gt; | git switch &lt;分支名&gt;</code></p><p>切换分支</p></li><li><p><code>git branch</code></p><p>查看分支</p></li><li><p><code>git merge &lt;分支名&gt;</code></p><p>合并指定分支到当前分支，例如：想要把a分支的内容合并到b分支上，需要切换到b分支，然后执行<code>git merge a</code>。</p></li><li><p><code>git branch -d &lt;分支名&gt;</code></p><p>删除分支</p></li><li><p><code>git log --graph</code></p><p>查看分支合并图</p></li></ol></li><li><p>git 标签</p><ol><li><p><code>git tag &lt;版本号&gt;</code></p><p>例如：<code>git tag v1.0</code></p><p>需要切换到要打标签的分支上，默认标签是打在最新提交的commit上的。</p></li><li><p><code>git tag</code></p><p>查看所有标签，标签不是按时间顺序列出，而是按字母排序的。可以用<code>git show &lt;tagname&gt;</code>查看标签信息。</p></li><li><p><code>git tag &lt;版本号&gt; &lt;commit号&gt;</code></p><p>给历史commit打标签</p></li><li><p><code>git tag -a &lt;版本号&gt; -m &quot;描述内容&quot;</code></p><p>带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字</p></li><li><p><code>git show &lt;tagname&gt;</code></p><p>查看版本号和说明文字</p></li><li><p><code>git tag -d &lt;版本号&gt;</code></p><p>删除标签</p></li><li><p><code>git push origin &lt;tagname&gt;</code></p><p>推送标签到远程</p></li><li><p><code>git push origin --tags</code></p><p>推送全部标签到远程</p></li><li><p><code>git push origin :refs/tags/&lt;tagname&gt;</code></p><p>删除远程标签，需要将本地标签先删除</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将本地代码提交到GitHub上</title>
      <link href="/2022/01/16/%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E5%88%B0GitHub%E4%B8%8A/"/>
      <url>/2022/01/16/%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E5%88%B0GitHub%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>根据互联网上的教程，利用<a href="https://github.com/" target="_blank">GitHub Page</a> + <a href="https://hexo.io/zh-cn/index.html" target="_blank">Hexo</a> 免费搭建了<a href="https://01-e.github.io/" target="_blank">个人博客</a>。其中，配置博客花费了最多的时间，而配置好的代码亟需上传到GitHub保存起来，相当于游戏存档，这样之后出错不至于从头再来。</p></blockquote><h4 id="1-提交准备"><a href="#1-提交准备" class="headerlink" title="1. 提交准备"></a>1. 提交准备</h4><ul><li>安装使用<a href="https://git-scm.com/" target="_blank">git</a>（分布式版本控制系统）。非常简单，随便创建一个文件夹（可以是要上传代码的文件夹） &rarr;选中 &rarr;鼠标右键 &rarr;Git Bash Here，这时就会看到一个输入命令的黑框（<code>git</code>终端）。</li></ul><ul><li><p>在<code>git</code>中配置GitHub的账号和邮箱。</p><p>分别执行下面两行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>Your Name：GitHub用户名，例如：我的GitHub用户名为“01-e”。</p><p><a href="mailto:&#101;&#x6d;&#97;&#105;&#108;&#x40;&#x65;&#x78;&#97;&#109;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;">&#101;&#x6d;&#97;&#105;&#108;&#x40;&#x65;&#x78;&#97;&#109;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;</a>：GitHub绑定邮箱，例如：我的邮箱为<a href="mailto:&#x63;&#x6c;&#x5f;&#57;&#56;&#50;&#x36;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;">&#x63;&#x6c;&#x5f;&#57;&#56;&#50;&#x36;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;</a>。</p><p>用户名可以在主页“Your profile”如下图中的三个地方找到。</p><p><img src="https://gitee.com/cl_9826/images/raw/master/img/GitHub%E7%94%A8%E6%88%B7%E5%90%8D.png" alt="用户名"></p><p>邮箱可以在“Settings &rarr;Emails”中找到。</p><p><img src="https://gitee.com/cl_9826/images/raw/master/img/Email.png" alt="Email"></p></li><li><p>在本地生成<code>ssh</code>私钥和公钥，公钥配置在GitHub中，并与本地连接。</p><p>先查看一下自己电脑有没有<code>.ssh</code>目录，查看路径是固定的：<code>C:</code>&rarr;<code>用户</code>&rarr;<code>xxx</code>&rarr;<code>.ssh</code></p><p><img src="https://gitee.com/cl_9826/images/raw/master/img/ssh%E7%9B%AE%E5%BD%95.png" alt=".ssh目录"></p><p>进入这个目录下有没有如下图的<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果没有，就在<code>git</code>终端中输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>这里的邮箱仍然是GitHub绑定的邮箱，这个命令是用来生成密钥对，输入命令之后有提示就按回车键，结束之后，就可以在上面的目录里面找到下图所示密钥对，<code>id_rsa</code>是私钥，<code>id_rsa.pub</code>是公钥。</p><p><img src="https://gitee.com/cl_9826/images/raw/master/img/%E7%A7%81%E9%92%A5%E5%92%8C%E5%85%AC%E9%92%A5.png" alt="私钥和公钥"></p><p>用记事本打开<code>id_rsa.pub</code>全选并复制里面的内容，在GitHub中依次点击”Settings”&rarr;”SSH and GPG keys”&rarr;”New SSH key”，进去之后”Title”可以随便写，将复制的内容全部粘贴到”Key”里面，然后点击”Add SSH key”，这时就可以看到如下图所示配置好的SSH key。</p><p><img src="https://gitee.com/cl_9826/images/raw/master/img/sshkey.png" alt="SSH keys"></p></li></ul><h4 id="2-开始提交"><a href="#2-开始提交" class="headerlink" title="2. 开始提交"></a>2. 开始提交</h4><p>提示：阅读完两个方法之后再开始实践！</p><p>假如电脑上的代码一无所有，只是成功连接本地与GitHub，那么可以看方法一：</p><ul><li><p>方法一：本地仓库已经关联GitHub仓库，开始写代码并提交。</p><ol><li><p>我从0开始，电脑新建一个文件夹，开始在里面写代码。在E盘新建了一个名为“demo”的文件夹，选中文件夹，”Git Bash Here”，输入下面命令初始化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>这个命令是将“demo”目录变成Git可以管理的仓库，会提示“Initialized empty Git repository in E:/demo/.git/”初始化了空的Git仓库，会在“demo”目录下新建一个隐藏文件<code>.git</code>，<code>ls -ah</code>命令就可以看见，不能乱改这个文件，否则就把仓库破坏了。</p></li><li><p>添加需要上传的文件或代码到本地仓库。</p><p>在新建的“demo”文件夹下添加一些文件（可以是自己写的代码），我添加了一个”code.txt”文件，输入下面命令查询仓库状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>查询之后如下图所示：</p><p><img src="https://gitee.com/cl_9826/images/raw/master/img/gitstatus.png" alt="git status"></p><p>红色文件是待添加到本地仓库的文件，绿色表示已添加到本地仓库的文件，”demo”文件夹下只有一个“code.txt”文件，并且还没有添加到仓库内，所以显示红色。</p><p>输入下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add code.txt</span><br></pre></td></tr></table></figure><p>将“code.txt”添加到git仓库的缓存中，这时候不会有任何提示，然后再用<code>git ststus</code>查一下仓库状态，嗯，真香，如下图所示：</p><p><img src="https://gitee.com/cl_9826/images/raw/master/img/gitadd.png" alt="git add"></p><p><strong>tips：</strong></p><p>提交多个文件可以用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add file1 file2 file3...</span><br></pre></td></tr></table></figure><p>提交所有文件可以用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>现在已经将“code.txt”提交到了仓库缓存，但离进入本地仓库还差最后一步，输入下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;first commit log&quot;</span><br></pre></td></tr></table></figure><p><code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，这样你就能从历史记录里方便地找到改动记录。</p></li><li><p>将本地仓库关联到GitHub仓库上</p><p>在GitHub上新建一个仓库，用来储存要提交的内容，具体步骤为：点击右上角加号&rarr;选择“New repository”。Repository name填入<code>demo</code>，描述随便写，选择“Private”，然后点击最下方绿色按钮“Create repository”。<img src="https://gitee.com/cl_9826/images/raw/master/img/repository.png" alt="New repository"></p><p>创建成功之后看到如下如所示的页面：</p><p><img src="https://gitee.com/cl_9826/images/raw/master/img/demo.png" alt="demo"></p><p>芜湖~复制红框中的地址，在git终端输入下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin </span><br></pre></td></tr></table></figure><p>将自己复制的地址粘贴到这串命令后面，例如我要输入的是<code>git remote add origin git@github.com:01-e/demo.git</code>，这里有个提醒，git终端不能<code>Ctrl + v</code>粘贴，只能右键“Pasty”粘贴进去。</p></li><li><p>最后，上传到GitHub，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>出现下面页面：</p><p><img src="https://gitee.com/cl_9826/images/raw/master/img/push.png" alt="git push"></p><p>此时已经将本地代码或文件<code>push</code>到GitHub仓库当中。</p><p><img src="https://gitee.com/cl_9826/images/raw/master/img/demo_code.png" alt="demo_code"></p></li></ol></li></ul><ul><li><p>方法二：已有本地仓库，想要添加新的代码或文件到GitHub。</p><p>第一种方法已经将已有代码提交上去，如果又有新增的代码，或者修改了原来的代码，就要增加一个步骤。</p><ol><li><p>在原来的“demo”文件夹下面新增“123.txt”文件，提交到GitHub。首先依旧选中“demo”目录，然后“Git Bash Here”，<code>git status</code>查看仓库状态，发现”123.txt”为红色，并没有在仓库中，这时候分别输入<code>git add 123.txt</code>、<code>git commit -m &quot;feat: update&quot;</code>来上传到本地仓库，然后<code>git remote add origin git@github.com:01-e/demo.git</code>关联到GitHub仓库，如果已经关联过就不用再关联了。最重要的是输入下面命令来同步远程仓库和本地仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cl_9826/images/raw/master/img/pull.png" alt="pull"></p><p>这一步之所以很重要，我是这样理解的，加入你在一个新的文件夹写了一些项目补充代码，是不是要去将GitHub代码“拉”到本地来对照一下，防止本地仓库与远程仓库不同步导致冲突。</p></li><li><p>最后，push!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/cl_9826/images/raw/master/img/demo_123.png" alt="demo_123"></p></li></ol></li></ul><p>以上，仅记录本人学习如何上传代码或文件到GitHub所思所写。</p><blockquote><p>如有帮助，请<font color=Chocolate>收藏/转发</font>支持。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/12/hello-world/"/>
      <url>/2022/01/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
